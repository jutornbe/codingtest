{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let PersonComponent = class PersonComponent {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n  }\n  ngOnInit() {\n    // Lataa henkilöt aluksi\n    this.loadPersons();\n  }\n  loadPersons() {\n    this.httpClient.get('/api/person') // Korvaa '/api/person' oikealla reitillä\n    .subscribe(response => {\n      this.persons = response;\n    });\n  }\n  addPerson() {\n    const newPerson = {\n      name: this.name\n    }; // Luo uusi henkilöobjekti tarpeen mukaan\n    this.httpClient.post('/api/person', newPerson) // Korvaa '/api/person' oikealla reitillä\n    .subscribe(() => {\n      // Päivitä näytettävien henkilöiden lista lisäyksen jälkeen\n      this.loadPersons();\n    });\n  }\n};\nPersonComponent = __decorate([Component({\n  selector: 'app-person',\n  templateUrl: './person.component.html',\n  styleUrls: ['./person.component.css']\n})], PersonComponent);","map":{"version":3,"names":["Component","PersonComponent","constructor","httpClient","ngOnInit","loadPersons","get","subscribe","response","persons","addPerson","newPerson","name","post","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\code\\cgitest1-gui\\src\\app\\persons\\persons.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Component({\n  selector: 'app-person',\n  templateUrl: './person.component.html',\n  styleUrls: ['./person.component.css']\n})\nexport class PersonComponent implements OnInit {\n  name: string;\n  persons: any[]; // Tässä voisi olla Person-tyyppi Angular-sovelluksesi mukaisesti\n\n  constructor(private httpClient: HttpClient) { }\n\n  ngOnInit(): void {\n    // Lataa henkilöt aluksi\n    this.loadPersons();\n  }\n\n  loadPersons() {\n    this.httpClient.get('/api/person') // Korvaa '/api/person' oikealla reitillä\n      .subscribe((response: any) => {\n        this.persons = response;\n      });\n  }\n\n  addPerson() {\n    const newPerson = { name: this.name }; // Luo uusi henkilöobjekti tarpeen mukaan\n    this.httpClient.post('/api/person', newPerson) // Korvaa '/api/person' oikealla reitillä\n      .subscribe(() => {\n        // Päivitä näytettävien henkilöiden lista lisäyksen jälkeen\n        this.loadPersons();\n      });\n  }\n}"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAQ1C,WAAMC,eAAe,GAArB,MAAMA,eAAe;EAI1BC,YAAoBC,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;EAAgB;EAE9CC,QAAQA,CAAA;IACN;IACA,IAAI,CAACC,WAAW,EAAE;EACpB;EAEAA,WAAWA,CAAA;IACT,IAAI,CAACF,UAAU,CAACG,GAAG,CAAC,aAAa,CAAC,CAAC;IAAA,CAChCC,SAAS,CAAEC,QAAa,IAAI;MAC3B,IAAI,CAACC,OAAO,GAAGD,QAAQ;IACzB,CAAC,CAAC;EACN;EAEAE,SAASA,CAAA;IACP,MAAMC,SAAS,GAAG;MAAEC,IAAI,EAAE,IAAI,CAACA;IAAI,CAAE,CAAC,CAAC;IACvC,IAAI,CAACT,UAAU,CAACU,IAAI,CAAC,aAAa,EAAEF,SAAS,CAAC,CAAC;IAAA,CAC5CJ,SAAS,CAAC,MAAK;MACd;MACA,IAAI,CAACF,WAAW,EAAE;IACpB,CAAC,CAAC;EACN;CACD;AA1BYJ,eAAe,GAAAa,UAAA,EAL3Bd,SAAS,CAAC;EACTe,QAAQ,EAAE,YAAY;EACtBC,WAAW,EAAE,yBAAyB;EACtCC,SAAS,EAAE,CAAC,wBAAwB;CACrC,CAAC,C,EACWhB,eAAe,CA0B3B"},"metadata":{},"sourceType":"module","externalDependencies":[]}