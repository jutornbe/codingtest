{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction PersonsComponent_tr_76_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"td\");\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"td\");\n    i0.ɵɵtext(12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"td\");\n    i0.ɵɵtext(14);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"td\");\n    i0.ɵɵtext(16);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const person_r2 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(person_r2.personalIdentificationNumber);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(person_r2.surName);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(person_r2.firstNames);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(person_r2.email);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(person_r2.streetAddress);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(person_r2.zipCode);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(person_r2.postalDistrict);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(person_r2.country);\n  }\n}\nexport class PersonsComponent {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.person = {\n      personalIdentificationNumber: '',\n      surName: '',\n      firstNames: '',\n      email: '',\n      streetAddress: '',\n      zipCode: '',\n      postalDistrict: '',\n      country: ''\n    };\n    this.persons = [];\n  }\n  ngOnInit() {\n    this.loadPersons();\n  }\n  isZipCodeValid() {\n    const zipCode = this.person.zipCode;\n    const zipCodePattern = /^\\d{5}$/;\n    if (zipCode && zipCodePattern.test(zipCode)) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  isPersonalIdentificationNumberValid() {\n    const personalIdentificationNumber = this.person.personalIdentificationNumber;\n    const personalIdentificationNumberPattern = /^[0-9]{6}[+\\-A][0-9]{3}[0-9A-Za-z]$/;\n    if (personalIdentificationNumber && personalIdentificationNumberPattern.test(personalIdentificationNumber)) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  isEmailValid() {\n    const email = this.person.email;\n    // Yksinkertainen sähköpostiosoitteen tarkistus\n    const emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n    if (email && emailPattern.test(email)) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  loadPersons() {\n    this.httpClient.get('http://localhost:8080/person').subscribe(response => {\n      this.persons = response;\n    });\n  }\n  addPerson() {\n    this.httpClient.post('http://localhost:8080/person', this.person).subscribe(() => {\n      // Updates list of persons\n      this.person = {\n        personalIdentificationNumber: '',\n        surName: '',\n        firstNames: '',\n        email: '',\n        streetAddress: '',\n        zipCode: '',\n        postalDistrict: '',\n        country: ''\n      };\n      this.loadPersons();\n    });\n  }\n  static #_ = this.ɵfac = function PersonsComponent_Factory(t) {\n    return new (t || PersonsComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: PersonsComponent,\n    selectors: [[\"app-person\"]],\n    decls: 77,\n    vars: 10,\n    consts: [[\"ngForm\", \"\"], [\"personForm\", \"ngForm\"], [\"for\", \"personalIdentificationNumber\"], [\"type\", \"text\", \"id\", \"personalIdentificationNumber\", \"name\", \"personalIdentificationNumber\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"surName\"], [\"type\", \"text\", \"id\", \"surName\", \"name\", \"surName\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"firstNames\"], [\"type\", \"text\", \"id\", \"firstNames\", \"name\", \"firstNames\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"email\"], [\"type\", \"text\", \"id\", \"email\", \"name\", \"email\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"streetAddress\"], [\"type\", \"text\", \"id\", \"streetAddress\", \"name\", \"streetAddress\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"zipCode\"], [\"type\", \"text\", \"id\", \"zipCode\", \"name\", \"zipCode\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"postalDistrict\"], [\"type\", \"text\", \"id\", \"postalDistrict\", \"name\", \"postalDistrict\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"country\"], [\"type\", \"text\", \"id\", \"country\", \"name\", \"country\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [3, \"disabled\", \"click\"], [4, \"ngFor\", \"ngForOf\"]],\n    template: function PersonsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h2\");\n        i0.ɵɵtext(1, \"Sy\\u00F6t\\u00E4 henkil\\u00F6tiedot\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"form\", 0, 1)(4, \"div\")(5, \"table\")(6, \"tr\")(7, \"td\")(8, \"label\", 2);\n        i0.ɵɵtext(9, \"Henkil\\u00F6tunnus*:\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(10, \"td\")(11, \"input\", 3);\n        i0.ɵɵlistener(\"ngModelChange\", function PersonsComponent_Template_input_ngModelChange_11_listener($event) {\n          return ctx.person.personalIdentificationNumber = $event;\n        });\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(12, \"tr\")(13, \"td\")(14, \"label\", 4);\n        i0.ɵɵtext(15, \"Sukunimi*:\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(16, \"td\")(17, \"input\", 5);\n        i0.ɵɵlistener(\"ngModelChange\", function PersonsComponent_Template_input_ngModelChange_17_listener($event) {\n          return ctx.person.surName = $event;\n        });\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(18, \"tr\")(19, \"td\")(20, \"label\", 6);\n        i0.ɵɵtext(21, \"Etunimet*:\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(22, \"td\")(23, \"input\", 7);\n        i0.ɵɵlistener(\"ngModelChange\", function PersonsComponent_Template_input_ngModelChange_23_listener($event) {\n          return ctx.person.firstNames = $event;\n        });\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(24, \"tr\")(25, \"td\")(26, \"label\", 8);\n        i0.ɵɵtext(27, \"S\\u00E4hk\\u00F6postiosoite*:\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(28, \"td\")(29, \"input\", 9);\n        i0.ɵɵlistener(\"ngModelChange\", function PersonsComponent_Template_input_ngModelChange_29_listener($event) {\n          return ctx.person.email = $event;\n        });\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(30, \"tr\")(31, \"td\")(32, \"label\", 10);\n        i0.ɵɵtext(33, \"Katuosoite*:\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(34, \"td\")(35, \"input\", 11);\n        i0.ɵɵlistener(\"ngModelChange\", function PersonsComponent_Template_input_ngModelChange_35_listener($event) {\n          return ctx.person.streetAddress = $event;\n        });\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(36, \"tr\")(37, \"td\")(38, \"label\", 12);\n        i0.ɵɵtext(39, \"Postinumero*:\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(40, \"td\")(41, \"input\", 13);\n        i0.ɵɵlistener(\"ngModelChange\", function PersonsComponent_Template_input_ngModelChange_41_listener($event) {\n          return ctx.person.zipCode = $event;\n        });\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(42, \"tr\")(43, \"td\")(44, \"label\", 14);\n        i0.ɵɵtext(45, \"Postitoimipaikka*:\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(46, \"td\")(47, \"input\", 15);\n        i0.ɵɵlistener(\"ngModelChange\", function PersonsComponent_Template_input_ngModelChange_47_listener($event) {\n          return ctx.person.postalDistrict = $event;\n        });\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(48, \"tr\")(49, \"td\")(50, \"label\", 16);\n        i0.ɵɵtext(51, \"Asuinmaa*:\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(52, \"td\")(53, \"input\", 17);\n        i0.ɵɵlistener(\"ngModelChange\", function PersonsComponent_Template_input_ngModelChange_53_listener($event) {\n          return ctx.person.country = $event;\n        });\n        i0.ɵɵelementEnd()()()()();\n        i0.ɵɵelementStart(54, \"button\", 18);\n        i0.ɵɵlistener(\"click\", function PersonsComponent_Template_button_click_54_listener() {\n          return ctx.addPerson();\n        });\n        i0.ɵɵtext(55, \"Lis\\u00E4\\u00E4 henkil\\u00F6\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(56, \"h2\");\n        i0.ɵɵtext(57, \"Henkil\\u00F6t\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(58, \"table\")(59, \"tr\")(60, \"td\");\n        i0.ɵɵtext(61, \"Henkil\\u00F6tunnus\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(62, \"td\");\n        i0.ɵɵtext(63, \"Sukunimi\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(64, \"td\");\n        i0.ɵɵtext(65, \"Etunimet\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(66, \"td\");\n        i0.ɵɵtext(67, \"Email\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(68, \"td\");\n        i0.ɵɵtext(69, \"Katuosoite\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(70, \"td\");\n        i0.ɵɵtext(71, \"Postinumero\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(72, \"td\");\n        i0.ɵɵtext(73, \"Postitoimipaikka\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(74, \"td\");\n        i0.ɵɵtext(75, \"Maa\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(76, PersonsComponent_tr_76_Template, 17, 8, \"tr\", 19);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        const _r0 = i0.ɵɵreference(3);\n        i0.ɵɵadvance(11);\n        i0.ɵɵproperty(\"ngModel\", ctx.person.personalIdentificationNumber);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngModel\", ctx.person.surName);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngModel\", ctx.person.firstNames);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngModel\", ctx.person.email);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngModel\", ctx.person.streetAddress);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngModel\", ctx.person.zipCode);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngModel\", ctx.person.postalDistrict);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngModel\", ctx.person.country);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"disabled\", !_r0.form.valid || !ctx.isZipCodeValid() || !ctx.isPersonalIdentificationNumberValid() || !ctx.isEmailValid());\n        i0.ɵɵadvance(22);\n        i0.ɵɵproperty(\"ngForOf\", ctx.persons);\n      }\n    },\n    dependencies: [i2.NgForOf, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.RequiredValidator, i3.NgModel, i3.NgForm],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate","person_r2","personalIdentificationNumber","surName","firstNames","email","streetAddress","zipCode","postalDistrict","country","PersonsComponent","constructor","httpClient","person","persons","ngOnInit","loadPersons","isZipCodeValid","zipCodePattern","test","isPersonalIdentificationNumberValid","personalIdentificationNumberPattern","isEmailValid","emailPattern","get","subscribe","response","addPerson","post","_","ɵɵdirectiveInject","i1","HttpClient","_2","selectors","decls","vars","consts","template","PersonsComponent_Template","rf","ctx","ɵɵlistener","PersonsComponent_Template_input_ngModelChange_11_listener","$event","PersonsComponent_Template_input_ngModelChange_17_listener","PersonsComponent_Template_input_ngModelChange_23_listener","PersonsComponent_Template_input_ngModelChange_29_listener","PersonsComponent_Template_input_ngModelChange_35_listener","PersonsComponent_Template_input_ngModelChange_41_listener","PersonsComponent_Template_input_ngModelChange_47_listener","PersonsComponent_Template_input_ngModelChange_53_listener","PersonsComponent_Template_button_click_54_listener","ɵɵtemplate","PersonsComponent_tr_76_Template","ɵɵproperty","_r0","form","valid"],"sources":["C:\\code\\cgitest1-gui\\src\\app\\persons\\persons.component.ts","C:\\code\\cgitest1-gui\\src\\app\\persons\\persons.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\ninterface Person {\n  personalIdentificationNumber: string;\n  surName: string;\n  firstNames: string;\n  email: string;\n  streetAddress: string;\n  zipCode: string;\n  postalDistrict: string;\n  country: string;\n}\n\n@Component({\n  selector: 'app-person',\n  templateUrl: './persons.component.html',\n  styleUrls: ['./persons.component.css']\n})\nexport class PersonsComponent implements OnInit {\n  person: Person = {\n    personalIdentificationNumber: '',\n    surName: '',\n    firstNames: '',\n    email: '',\n    streetAddress: '',\n    zipCode: '',\n    postalDistrict: '',\n    country: ''\n  };\n  persons: Person[] = [];\n\n  constructor(private httpClient: HttpClient) { }\n\n  ngOnInit(): void {\n    this.loadPersons();\n  }\n\n  isZipCodeValid(): boolean {\n    const zipCode = this.person.zipCode;\n    const zipCodePattern = /^\\d{5}$/;\n    if (zipCode && zipCodePattern.test(zipCode)) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  isPersonalIdentificationNumberValid(): boolean {\n    const personalIdentificationNumber = this.person.personalIdentificationNumber;\n    const personalIdentificationNumberPattern = /^[0-9]{6}[+\\-A][0-9]{3}[0-9A-Za-z]$/;\n    if (personalIdentificationNumber && personalIdentificationNumberPattern.test(personalIdentificationNumber)) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  isEmailValid(): boolean {\n    const email = this.person.email;\n    // Yksinkertainen sähköpostiosoitteen tarkistus\n    const emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n    if (email && emailPattern.test(email)) {\n      return true;\n    } else {\n      return false;\n    }  \n  }\n\n  loadPersons() {\n    this.httpClient.get('http://localhost:8080/person')\n      .subscribe(\n        (response: any) => {\n        this.persons = response;        \n      });\n  }\n\n  addPerson() {\n    this.httpClient.post('http://localhost:8080/person', this.person).subscribe(() => {\n        // Updates list of persons\n        this.person = {\n          personalIdentificationNumber: '',\n          surName: '',\n          firstNames: '',          \n          email: '',\n          streetAddress: '',\n          zipCode: '',\n          postalDistrict: '',\n          country: ''\n        };\n        \n        this.loadPersons();\n      });\n  }\n}","<h2>Syötä henkilötiedot</h2>\n<form ngForm #personForm=\"ngForm\">\n  <div>\n  <table>\n    <tr>\n      <td><label for=\"personalIdentificationNumber\">Henkilötunnus*:</label></td>\n      <td><input type=\"text\" id=\"personalIdentificationNumber\" [(ngModel)]=\"person.personalIdentificationNumber\" name=\"personalIdentificationNumber\" required></td>\n    </tr>\n    <tr>\n      <td><label for=\"surName\">Sukunimi*:</label></td>\n      <td><input type=\"text\" id=\"surName\" [(ngModel)]=\"person.surName\" name=\"surName\" required></td>\n    </tr>\n    <tr>\n      <td><label for=\"firstNames\">Etunimet*:</label></td>\n      <td><input type=\"text\" id=\"firstNames\" [(ngModel)]=\"person.firstNames\" name=\"firstNames\" required></td>\n    </tr>\n    <tr>\n      <td><label for=\"email\">Sähköpostiosoite*:</label></td>\n      <td><input type=\"text\" id=\"email\" [(ngModel)]=\"person.email\" name=\"email\" required></td>\n    </tr>\n    <tr>\n      <td><label for=\"streetAddress\">Katuosoite*:</label></td>\n      <td><input type=\"text\" id=\"streetAddress\" [(ngModel)]=\"person.streetAddress\" name=\"streetAddress\" required></td>\n    </tr>\n    <tr>\n      <td><label for=\"zipCode\">Postinumero*:</label></td>\n      <td><input type=\"text\" id=\"zipCode\" [(ngModel)]=\"person.zipCode\" name=\"zipCode\" required></td>\n    </tr>\n    <tr>\n      <td><label for=\"postalDistrict\">Postitoimipaikka*:</label></td>\n      <td><input type=\"text\" id=\"postalDistrict\" [(ngModel)]=\"person.postalDistrict\" name=\"postalDistrict\" required></td>\n    </tr>\n    <tr>\n      <td><label for=\"country\">Asuinmaa*:</label></td>\n      <td><input type=\"text\" id=\"country\" [(ngModel)]=\"person.country\" name=\"country\" required></td>\n    </tr>\n  </table>\n  </div>\n\n  <button [disabled]=\"!personForm.form.valid || !isZipCodeValid() || !isPersonalIdentificationNumberValid() || !isEmailValid()\" (click)=\"addPerson()\">Lisää henkilö</button>\n</form>\n\n<h2>Henkilöt</h2>\n<table>\n  <tr>\n    <td>Henkilötunnus</td>\n    <td>Sukunimi</td>\n    <td>Etunimet</td>\n    <td>Email</td>\n    <td>Katuosoite</td>\n    <td>Postinumero</td>\n    <td>Postitoimipaikka</td>\n    <td>Maa</td>\n  </tr>\n  <tr *ngFor=\"let person of persons\">\n    <td>{{person.personalIdentificationNumber}}</td>\n    <td>{{ person.surName }}</td>\n    <td>{{ person.firstNames }}</td>\n    <td>{{ person.email }}</td>\n    <td>{{ person.streetAddress }}</td>\n    <td>{{ person.zipCode }}</td>\n    <td>{{ person.postalDistrict }}</td>\n    <td>{{ person.country }}</td>\n  </tr>\n</table>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}